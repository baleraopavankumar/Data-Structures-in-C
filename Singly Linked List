// Singly Linked List  All Operations in C

#include<stdio.h>
#include<stdlib.h>

struct node {
    int data;
    struct node *link;
};

struct node *head;

void display() {
    struct node *temp = head;
    while (temp != NULL) {
        printf("%d\t", temp->data);
        temp = temp->link;
    }
}

void del_end() {
    struct node *temp, *temp1;
    temp = head;
    if (temp == NULL) {
        printf("Linked List is Empty\n");
        return;
    }
    while (temp->link != NULL) {
        temp1 = temp;
        temp = temp->link;
    }
    if (temp == head) {
        free(temp);
        head = NULL;
    } else {
        temp1->link = NULL;
        free(temp);
    }
}

void search() {
    int x, i = 0;
    struct node *temp;
    printf("Enter Element to be Searched:");
    scanf("%d", &x);
    temp = head;
    while (temp != NULL) {
        if (temp->data == x) {
            printf("Element Found at Location:%d\n", i + 1);
            return;
        }
        temp = temp->link;
        i++;
    }
    printf("Element Not Found at the Location\n");
}

void insert_beg() {
    struct node *newnode;
    newnode=(struct node *)malloc(sizeof(struct node*));
    int num;
    printf("Enter the Data to be Inserted at Begining:");
    scanf("%d",&num);
    newnode->data=num;
    if(head==NULL) {
        newnode->link=NULL;
    }
    newnode->link=head;
    head=newnode;
}

void insert_ran() {
    struct node *newnode, *temp;
    newnode = (struct node *)malloc(sizeof(struct node));
    if (newnode == NULL) {
        printf("Memory allocation failed.\n");
        return;
    }
    int x, loc;
    printf("Enter the Data to be Inserted at Random Position: ");
    scanf("%d", &x);
    printf("Enter Position to Insert Data:");
    scanf("%d", &loc);
    newnode->data = x;
    temp = head;
    if (loc == 1) {
        newnode->link = head;
        head = newnode;
        return;
    }
    for (int i = 1; i < loc - 1 && temp != NULL; ++i) {
        temp = temp->link;
    }
    if (temp == NULL) {
        printf("Invalid Position to Insert the Data\n");
        free(newnode);
        return;
    }
    newnode->link = temp->link;
    temp->link = newnode;
}

void insert_end() {
    struct node *newnode, *temp;
    int x;
    printf("Enter the Data to be Inserted at End:");
    scanf("%d", &x);
    newnode = (struct node*)malloc(sizeof(struct node));
    newnode->data = x;
    newnode->link = NULL;
    if (head == NULL) {
        head = newnode;
    } else {
        temp = head;
        while (temp->link != NULL) {
            temp = temp->link;
        }
        temp->link = newnode;
    }
}

void del_ran() {
    struct node *temp1, *temp;
    temp = head;
    int x;
    printf("Enter the Element to be Deleted:");
    scanf("%d", &x);
    if (temp == NULL) {
        printf("Linked List is Empty Unable to Delete Element's\n");
        return;
    }
    if (temp->data == x) {
        head = temp->link;
        free(temp);
        return;
    }
    while (temp != NULL && temp->data != x) {
        temp1 = temp;
        temp = temp->link;
    }
    if (temp == NULL) {
        printf("Node with Data %d Not Found\n", x);
        return;
    }
    temp1->link = temp->link;
    free(temp);
}

void del_beg() {
    struct node *temp;
    temp=head;
    head=temp->link;
    free(temp);
}

int main() {
    printf("Choose Your Choice of Operation:\n\n1.Insert at Begining\n2.Insert at Random\n");
    printf("3.Insert at End\n4.Deletion at Begining\n5.Deletion at Random\n6.Deletion at End\n");
    printf("7.Display the Elements\n8.Search the Element\n9.STOP THE OPERATION\n");

    while(1) {
        int choice;
        printf("\nEnter Your Choice of Operation:");
        scanf("%d",&choice);

        switch(choice) {
        case 1:
            insert_beg();
            break;
        case 2:
            insert_ran();
            break;
        case 3:
            insert_end();
            break;
        case 4:
            del_beg();
            break;
        case 5:
            del_ran();
            break;
        case 6:
            del_end();
            break;
        case 7:
            display();
            break;
        case 8:
            search();
            break;
        case 9:
            exit(0);
            break;
        default:
            printf("Invalid Input");
            break;
        }
    }
    return 0;
}
